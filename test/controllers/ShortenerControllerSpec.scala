package controllers

import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import model.CustomNewUrl
import org.scalatestplus.play._
import org.scalatestplus.play.guice._
import play.api.Logger
import play.api.libs.json.Json
import play.api.test.Helpers._
import play.api.test.{FakeRequest, _}
import service.{CustomCache, ShortenerService}

class ShortenerControllerSpec extends PlaySpec with GuiceOneAppPerTest with Injecting {

  val logger: Logger = Logger(this.getClass)

  "ShortenerController" should {

    "get the default value from  api" in {
      implicit val materializer = ActorMaterializer()(ActorSystem())
      val controllerComponents =
        Helpers.stubControllerComponents(
          playBodyParsers = Helpers.stubPlayBodyParsers(materializer)
        )

      val shortenerService = new ShortenerService(new CustomCache())
      shortenerService createShortLink(Some(CustomNewUrl("qwerty1235", "https://gooogle.com", 5000L)))
      val controller = new ShortenerController(controllerComponents, shortenerService)
      val getUrl = controller.getById("qwerty1235").apply(FakeRequest(GET, "/shorturls"))

      status(getUrl) mustBe OK
      contentType(getUrl) mustBe Some("application/json")
      contentAsString(getUrl) must include("https://gooogle.com")
    }

    "save value with default lifetime and autogenerated short link should be present in cache" in {
      implicit val materializer = ActorMaterializer()(ActorSystem())
      val controllerComponents =
        Helpers.stubControllerComponents(
          playBodyParsers = Helpers.stubPlayBodyParsers(materializer)
        )
      val controller = new ShortenerController(controllerComponents, new ShortenerService(new CustomCache()))
      val postUrl = controller.addNewUrl().apply(FakeRequest(POST, "/shorturls").withJsonBody(Json.obj("url" -> "https://tuitter.com", "lifeTime" -> 10)))

      status(postUrl) mustBe CREATED
      contentType(postUrl) mustBe Some("text/plain")
      logger.info(s"Custom url response ${contentAsString(postUrl)}")

      val getUrl = controller.getById(contentAsString(postUrl)).apply(FakeRequest(GET, "/shorturls"))

      status(getUrl) mustBe OK
      contentType(getUrl) mustBe Some("application/json")
      contentAsString(getUrl) must include("https://tuitter.com")
    }

    "save custom short url and lifetime should be present in cache and t" in {
      implicit val materializer = ActorMaterializer()(ActorSystem())
      val controllerComponents =
        Helpers.stubControllerComponents(
          playBodyParsers = Helpers.stubPlayBodyParsers(materializer)
        )
      val controller = new ShortenerController(controllerComponents, new ShortenerService(new CustomCache()))
      val body = Json.obj("shortUrl" -> "qwerty6532", "url" -> "https://teitter.com", "lifeTime" -> 10)
      logger.info(s"Custom url request body: { ${body.fields.map(el => s"${el._1} -> ${el._2}").mkString(", ")} }")
      val postUrl = controller.addCustomShortUrl().apply(
        FakeRequest.apply(POST, "/shorturls/custom")
          .withHeaders(FakeHeaders(List("Content-Type" -> "application/json")))
          .withJsonBody(body)
      )

      status(postUrl) mustBe CREATED
      contentType(postUrl) mustBe Some("text/plain")
      logger.info(s"Custom url POST response ${contentAsString(postUrl)}")

      val getUrl = controller.getById(contentAsString(postUrl)).apply(FakeRequest(GET, "/shorturls"))

      status(getUrl) mustBe OK
      contentType(getUrl) mustBe Some("application/json")
      contentAsString(getUrl) must include("https://teitter.com")
    }

    "save custom short url and lifetime should be present in cache" in {
      implicit val materializer = ActorMaterializer()(ActorSystem())
      val controllerComponents =
        Helpers.stubControllerComponents(
          playBodyParsers = Helpers.stubPlayBodyParsers(materializer)
        )
      val controller = new ShortenerController(controllerComponents, new ShortenerService(new CustomCache()))
      val body = Json.obj("shortUrl" -> "qwerty6532", "url" -> "https://teitter.com", "lifeTime" -> 10)
      logger.info(body.fields.mkString(", "))
      val postUrl = controller.addCustomShortUrl().apply(
        FakeRequest.apply(POST, "/shorturls/custom")
          .withHeaders(FakeHeaders(List("Content-Type" -> "application/json")))
          .withJsonBody(body)
      )

      status(postUrl) mustBe CREATED
      contentType(postUrl) mustBe Some("text/plain")
      logger.info(s"Custom url response ${contentAsString(postUrl)}")

      val getUrl = controller.getById(contentAsString(postUrl)).apply(FakeRequest(GET, "/shorturls"))

      status(getUrl) mustBe OK
      contentType(getUrl) mustBe Some("application/json")
      contentAsString(getUrl) must include("https://teitter.com")
    }

    "cache should contain not expired objects and should delete expired objects from cache" in {
      implicit val materializer = ActorMaterializer()(ActorSystem())
      val controllerComponents =
        Helpers.stubControllerComponents(
          playBodyParsers = Helpers.stubPlayBodyParsers(materializer)
        )
      val controller = new ShortenerController(controllerComponents, new ShortenerService(new CustomCache()))
      val body = Json.obj("shortUrl" -> "qwerty6532", "url" -> "https://teitter.com", "lifeTime" -> 5)
      logger.info(s"Custom url request body: $body")
      val postUrl = controller.addCustomShortUrl().apply(
        FakeRequest.apply(POST, "/shorturls/custom")
          .withHeaders(FakeHeaders(List("Content-Type" -> "application/json")))
          .withJsonBody(body)
      )

      status(postUrl) mustBe CREATED
      contentType(postUrl) mustBe Some("text/plain")
      logger.info(s"Custom url response ${contentAsString(postUrl)}")

      val getUrl = controller.getById(contentAsString(postUrl)).apply(FakeRequest(GET, "/shorturls"))

      status(getUrl) mustBe OK
      contentType(getUrl) mustBe Some("application/json")
      contentAsString(getUrl) must include("https://teitter.com")

      /*
       * Trying to delete not expired object
       */

      val clear1 = controller.clearCache().apply(FakeRequest(POST, "/clear"))
      status(clear1) mustBe OK
      logger.info(s"Custom url response ${contentAsString(clear1)}")
      contentAsString(clear1) must include("Cache size before cleaning = 2 Cache size after cleaning = 2")

      /*
       * Expired object should be deleted
       */

      Thread.sleep(5100)
      val clear2 = controller.clearCache().apply(FakeRequest(POST, "/clear"))
      status(clear2) mustBe OK
      logger.info(s"Custom url response after expiration ${contentAsString(clear2)}")
      contentAsString(clear2) must include("Cache size before cleaning = 2 Cache size after cleaning = 0")
    }
  }
}
